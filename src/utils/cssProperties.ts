/**
 * CSS属性自动补全工具
 * 从TypeScript的CSSStyleDeclaration接口中提取所有CSS属性
 */

// 通过TypeScript的类型系统获取CSSStyleDeclaration的所有属性名
type CSSPropertyKeys = {
	[K in keyof CSSStyleDeclaration]: CSSStyleDeclaration[K] extends string
		? K
		: never;
}[keyof CSSStyleDeclaration];

// 获取所有CSS属性名的函数
export function getAllCSSProperties(): string[] {
	// 创建一个虚拟的style对象来获取所有属性
	const div = document.createElement("div");
	const computedStyle = getComputedStyle(div);

	const properties: string[] = [];

	// 遍历computedStyle对象的所有属性
	for (let i = 0; i < computedStyle.length; i++) {
		const property = computedStyle.item(i);
		if (property) {
			properties.push(property);
		}
	}

	// 额外添加一些常用但可能没有在computedStyle中的属性
	const additionalProperties = [
		"accentColor",
		"alignContent",
		"alignItems",
		"alignSelf",
		"alignmentBaseline",
		"all",
		"animation",
		"animationComposition",
		"animationDelay",
		"animationDirection",
		"animationDuration",
		"animationFillMode",
		"animationIterationCount",
		"animationName",
		"animationPlayState",
		"animationTimingFunction",
		"appearance",
		"aspectRatio",
		"backdropFilter",
		"backfaceVisibility",
		"background",
		"backgroundAttachment",
		"backgroundBlendMode",
		"backgroundClip",
		"backgroundColor",
		"backgroundImage",
		"backgroundOrigin",
		"backgroundPosition",
		"backgroundPositionX",
		"backgroundPositionY",
		"backgroundRepeat",
		"backgroundSize",
		"baselineShift",
		"baselineSource",
		"blockSize",
		"border",
		"borderBlock",
		"borderBlockColor",
		"borderBlockEnd",
		"borderBlockEndColor",
		"borderBlockEndStyle",
		"borderBlockEndWidth",
		"borderBlockStart",
		"borderBlockStartColor",
		"borderBlockStartStyle",
		"borderBlockStartWidth",
		"borderBlockStyle",
		"borderBlockWidth",
		"borderBottom",
		"borderBottomColor",
		"borderBottomLeftRadius",
		"borderBottomRightRadius",
		"borderBottomStyle",
		"borderBottomWidth",
		"borderCollapse",
		"borderColor",
		"borderEndEndRadius",
		"borderEndStartRadius",
		"borderImage",
		"borderImageOutset",
		"borderImageRepeat",
		"borderImageSlice",
		"borderImageSource",
		"borderImageWidth",
		"borderInline",
		"borderInlineColor",
		"borderInlineEnd",
		"borderInlineEndColor",
		"borderInlineEndStyle",
		"borderInlineEndWidth",
		"borderInlineStart",
		"borderInlineStartColor",
		"borderInlineStartStyle",
		"borderInlineStartWidth",
		"borderInlineStyle",
		"borderInlineWidth",
		"borderLeft",
		"borderLeftColor",
		"borderLeftStyle",
		"borderLeftWidth",
		"borderRadius",
		"borderRight",
		"borderRightColor",
		"borderRightStyle",
		"borderRightWidth",
		"borderSpacing",
		"borderStartEndRadius",
		"borderStartStartRadius",
		"borderStyle",
		"borderTop",
		"borderTopColor",
		"borderTopLeftRadius",
		"borderTopRightRadius",
		"borderTopStyle",
		"borderTopWidth",
		"borderWidth",
		"bottom",
		"boxDecorationBreak",
		"boxShadow",
		"boxSizing",
		"breakAfter",
		"breakBefore",
		"breakInside",
		"captionSide",
		"caretColor",
		"clear",
		"clip",
		"clipPath",
		"clipRule",
		"color",
		"colorInterpolation",
		"colorInterpolationFilters",
		"colorScheme",
		"columnCount",
		"columnFill",
		"columnGap",
		"columnRule",
		"columnRuleColor",
		"columnRuleStyle",
		"columnRuleWidth",
		"columnSpan",
		"columnWidth",
		"columns",
		"contain",
		"containIntrinsicBlockSize",
		"containIntrinsicHeight",
		"containIntrinsicInlineSize",
		"containIntrinsicSize",
		"containIntrinsicWidth",
		"container",
		"containerName",
		"containerType",
		"content",
		"contentVisibility",
		"counterIncrement",
		"counterReset",
		"counterSet",
		"cssFloat",
		"cssText",
		"cursor",
		"cx",
		"cy",
		"d",
		"direction",
		"display",
		"dominantBaseline",
		"emptyCells",
		"fill",
		"fillOpacity",
		"fillRule",
		"filter",
		"flex",
		"flexBasis",
		"flexDirection",
		"flexFlow",
		"flexGrow",
		"flexShrink",
		"flexWrap",
		"float",
		"floodColor",
		"floodOpacity",
		"font",
		"fontFamily",
		"fontFeatureSettings",
		"fontKerning",
		"fontOpticalSizing",
		"fontPalette",
		"fontSize",
		"fontSizeAdjust",
		"fontStretch",
		"fontStyle",
		"fontSynthesis",
		"fontSynthesisPosition",
		"fontSynthesisSmallCaps",
		"fontSynthesisStyle",
		"fontSynthesisWeight",
		"fontVariant",
		"fontVariantAlternates",
		"fontVariantCaps",
		"fontVariantEastAsian",
		"fontVariantEmoji",
		"fontVariantLigatures",
		"fontVariantNumeric",
		"fontVariantPosition",
		"fontVariationSettings",
		"fontWeight",
		"forcedColorAdjust",
		"gap",
		"grid",
		"gridArea",
		"gridAutoColumns",
		"gridAutoFlow",
		"gridAutoRows",
		"gridColumn",
		"gridColumnEnd",
		"gridColumnGap",
		"gridColumnStart",
		"gridGap",
		"gridRow",
		"gridRowEnd",
		"gridRowGap",
		"gridRowStart",
		"gridTemplate",
		"gridTemplateAreas",
		"gridTemplateColumns",
		"gridTemplateRows",
		"hangingPunctuation",
		"height",
		"hyphenateCharacter",
		"hyphenateLimit",
		"hyphenateLimitChars",
		"hyphenateLimitLast",
		"hyphenateLimitLines",
		"hyphenateLimitZone",
		"hyphens",
		"imageOrientation",
		"imageRendering",
		"imageResolution",
		"imeMode",
		"inlineSize",
		"inset",
		"insetBlock",
		"insetBlockEnd",
		"insetBlockStart",
		"insetInline",
		"insetInlineEnd",
		"insetInlineStart",
		"isolation",
		"justifyContent",
		"justifyItems",
		"justifySelf",
		"left",
		"letterSpacing",
		"lightingColor",
		"lineBreak",
		"lineHeight",
		"lineHeightStep",
		"listStyle",
		"listStyleImage",
		"listStylePosition",
		"listStyleType",
		"margin",
		"marginBlock",
		"marginBlockEnd",
		"marginBlockStart",
		"marginBottom",
		"marginInline",
		"marginInlineEnd",
		"marginInlineStart",
		"marginLeft",
		"marginRight",
		"marginTop",
		"marker",
		"markerEnd",
		"markerMid",
		"markerStart",
		"mask",
		"maskBorder",
		"maskBorderMode",
		"maskBorderOutset",
		"maskBorderRepeat",
		"maskBorderSlice",
		"maskBorderSource",
		"maskBorderWidth",
		"maskClip",
		"maskComposite",
		"maskImage",
		"maskMode",
		"maskOrigin",
		"maskPosition",
		"maskRepeat",
		"maskSize",
		"maskType",
		"mathDepth",
		"mathShift",
		"mathStyle",
		"maxBlockSize",
		"maxHeight",
		"maxInlineSize",
		"maxWidth",
		"minBlockSize",
		"minHeight",
		"minInlineSize",
		"minWidth",
		"mixBlendMode",
		"objectFit",
		"objectPosition",
		"objectViewBox",
		"offset",
		"offsetAnchor",
		"offsetDistance",
		"offsetPath",
		"offsetPosition",
		"offsetRotate",
		"opacity",
		"order",
		"orphans",
		"outline",
		"outlineColor",
		"outlineOffset",
		"outlineStyle",
		"outlineWidth",
		"overflow",
		"overflowAnchor",
		"overflowBlock",
		"overflowClipMargin",
		"overflowInline",
		"overflowWrap",
		"overflowX",
		"overflowY",
		"overscrollBehavior",
		"overscrollBehaviorBlock",
		"overscrollBehaviorInline",
		"overscrollBehaviorX",
		"overscrollBehaviorY",
		"padding",
		"paddingBlock",
		"paddingBlockEnd",
		"paddingBlockStart",
		"paddingBottom",
		"paddingInline",
		"paddingInlineEnd",
		"paddingInlineStart",
		"paddingLeft",
		"paddingRight",
		"paddingTop",
		"page",
		"pageBreakAfter",
		"pageBreakBefore",
		"pageBreakInside",
		"paintOrder",
		"perspective",
		"perspectiveOrigin",
		"placeContent",
		"placeItems",
		"placeSelf",
		"pointerEvents",
		"position",
		"printColorAdjust",
		"quotes",
		"r",
		"resize",
		"right",
		"rotate",
		"rowGap",
		"rubyAlign",
		"rubyPosition",
		"rx",
		"ry",
		"scale",
		"scrollBehavior",
		"scrollMargin",
		"scrollMarginBlock",
		"scrollMarginBlockEnd",
		"scrollMarginBlockStart",
		"scrollMarginBottom",
		"scrollMarginInline",
		"scrollMarginInlineEnd",
		"scrollMarginInlineStart",
		"scrollMarginLeft",
		"scrollMarginRight",
		"scrollMarginTop",
		"scrollPadding",
		"scrollPaddingBlock",
		"scrollPaddingBlockEnd",
		"scrollPaddingBlockStart",
		"scrollPaddingBottom",
		"scrollPaddingInline",
		"scrollPaddingInlineEnd",
		"scrollPaddingInlineStart",
		"scrollPaddingLeft",
		"scrollPaddingRight",
		"scrollPaddingTop",
		"scrollSnapAlign",
		"scrollSnapStop",
		"scrollSnapType",
		"scrollbarColor",
		"scrollbarGutter",
		"scrollbarWidth",
		"shapeImageThreshold",
		"shapeMargin",
		"shapeOutside",
		"shapeRendering",
		"stopColor",
		"stopOpacity",
		"stroke",
		"strokeDasharray",
		"strokeDashoffset",
		"strokeLinecap",
		"strokeLinejoin",
		"strokeMiterlimit",
		"strokeOpacity",
		"strokeWidth",
		"tabSize",
		"tableLayout",
		"textAlign",
		"textAlignLast",
		"textAnchor",
		"textCombineUpright",
		"textDecoration",
		"textDecorationColor",
		"textDecorationLine",
		"textDecorationSkip",
		"textDecorationSkipInk",
		"textDecorationStyle",
		"textDecorationThickness",
		"textEmphasis",
		"textEmphasisColor",
		"textEmphasisPosition",
		"textEmphasisStyle",
		"textIndent",
		"textJustify",
		"textOrientation",
		"textOverflow",
		"textRendering",
		"textShadow",
		"textSizeAdjust",
		"textTransform",
		"textUnderlineOffset",
		"textUnderlinePosition",
		"textWrap",
		"textWrapMode",
		"textWrapStyle",
		"top",
		"touchAction",
		"transform",
		"transformBox",
		"transformOrigin",
		"transformStyle",
		"transition",
		"transitionBehavior",
		"transitionDelay",
		"transitionDuration",
		"transitionProperty",
		"transitionTimingFunction",
		"translate",
		"unicodeBidi",
		"userSelect",
		"vectorEffect",
		"verticalAlign",
		"viewTransitionName",
		"visibility",
		"whiteSpace",
		"whiteSpaceCollapse",
		"widows",
		"width",
		"willChange",
		"wordBreak",
		"wordSpacing",
		"wordWrap",
		"writingMode",
		"x",
		"y",
		"zIndex",
		"zoom",
	];

	// 合并并去重
	const allProperties = [
		...new Set([...properties, ...additionalProperties]),
	];

	// 按字母顺序排序
	return allProperties.sort();
}

// 根据输入过滤CSS属性
export function filterCSSProperties(
	input: string,
	allProperties: string[]
): string[] {
	if (!input) return allProperties;

	const lowerInput = input.toLowerCase();

	return allProperties
		.filter((property) => property.toLowerCase().includes(lowerInput))
		.slice(0, 50); // 限制结果数量以提高性能
}

// 获取CSS属性的建议值（基于常见的CSS值）
export function getCSSPropertySuggestions(property: string): string[] {
	const suggestions: Record<string, string[]> = {
		display: [
			"block",
			"inline",
			"inline-block",
			"flex",
			"grid",
			"none",
			"table",
			"table-cell",
		],
		position: ["static", "relative", "absolute", "fixed", "sticky"],
		flexDirection: ["row", "column", "row-reverse", "column-reverse"],
		justifyContent: [
			"flex-start",
			"flex-end",
			"center",
			"space-between",
			"space-around",
			"space-evenly",
		],
		alignItems: ["flex-start", "flex-end", "center", "baseline", "stretch"],
		textAlign: ["left", "right", "center", "justify"],
		fontWeight: [
			"normal",
			"bold",
			"100",
			"200",
			"300",
			"400",
			"500",
			"600",
			"700",
			"800",
			"900",
		],
		fontSize: [
			"12px",
			"14px",
			"16px",
			"18px",
			"20px",
			"24px",
			"1rem",
			"1.2rem",
			"1.5rem",
		],
		color: [
			"#000000",
			"#ffffff",
			"#ff0000",
			"#00ff00",
			"#0000ff",
			"red",
			"green",
			"blue",
			"transparent",
		],
		backgroundColor: [
			"#ffffff",
			"#000000",
			"#f0f0f0",
			"#e0e0e0",
			"transparent",
		],
		border: ["1px solid #000", "2px solid #ccc", "none"],
		borderRadius: ["0", "4px", "8px", "12px", "16px", "50%"],
		padding: ["0", "4px", "8px", "12px", "16px", "20px", "24px"],
		margin: ["0", "4px", "8px", "12px", "16px", "20px", "24px", "auto"],
		width: [
			"auto",
			"100%",
			"50%",
			"25%",
			"fit-content",
			"max-content",
			"min-content",
		],
		height: [
			"auto",
			"100%",
			"50%",
			"fit-content",
			"max-content",
			"min-content",
		],
		overflow: ["visible", "hidden", "scroll", "auto"],
		cursor: [
			"pointer",
			"default",
			"text",
			"wait",
			"not-allowed",
			"grab",
			"grabbing",
		],
		transition: [
			"all 0.3s ease",
			"all 0.2s ease-in-out",
			"opacity 0.3s ease",
		],
		transform: [
			"translateX(0)",
			"translateY(0)",
			"scale(1)",
			"rotate(0deg)",
		],
	};

	return suggestions[property] || [];
}
